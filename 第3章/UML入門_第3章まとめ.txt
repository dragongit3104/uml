開発プロセスとは
  
  開発工程の順番や作業内容、各工程で作業する人の役割、
  各工程のインプットとなる成果物、アウトプットとなる成果物、成果物の雛形が定義されている。

  開発工程
　  
    要求分析
      システムで実現すべき要件を明確化する。
      要件の中にはユーザがソフトウェアに望む機能要件と性能や信頼性など機能以外に関する非機能要件がある。

    分析
      要求分析で明確化した要件を基に、システムの論理的な構造と振る舞いを整理した「分析モデル」を作成する

    アーキテクチャ設計
      システムの全体構造・部品構成・設計方法を定義する。

    詳細設計
      分析で作成した「分析モデル」およびアーキテクチャを基に、システムの実現手段を整理した「設計モデル」を作成する。

    実装
      詳細設計で作成した「設計モデル」をもとに、プログラムを作成する

  ウォーターフォール型開発プロセス
    
    プロジェクトの各工程を1つずつ順番に実施しながらシステムを完成させる

    特徴
      ・プロジェクトおよび工程の初めに全体の計画を立てる。
      ・各工程での成果物を明確に定義する
      ・1つの工程を完了させてから次工程に進み、後戻りはしない。

    メリット
      ・最初に計画を立てるため、予算を組みやすい。
      ・工程とスケジュールが明確なため、要員をアサインしやすい
      ・各工程で実施する作業が明確なため、要員の動機づけがしやすい
      ・各工程でドキュメント系の成果物を充実させるため、大規模プロジェクトの情報共有がしやすい
      ・要件がはっきりしているシステムを構築する場合、作業の実施・管理がしやすい
    
    デメリット
      ・要件が明確ではない場合、計画を立てることすらできないため、作業が全く進められない
      ・システムが動作し始めるのが後半のため、要件の漏れや仕様の不具合が遅くなり、進捗に大きく影響する
      ・各工程での区分が強く担当する要員がことなるため、工程間の意思疎通が困難となり、品質低下につながる
   
  スパイラル型開発プロセス

    ウォーターフォールの弱点である「システムが動作し始めるのが後半のため、要件の漏れや仕様の不具合が遅くなり、進捗に大きく影響する
    を解決するため、1988年にバリーボームが提唱

    「計画&分析」→「詳細設計」→「実装&テスト」→「評価」を1サイクルとして、このサイクルを複数回繰り返す。

    1サイクルごとに試作品(プロトタイプ)を作成する

    メリット
      ・プロトタイプは実際にユーザに見てもらうことができるため、ユーザの要求やシステムの品質を確認できる。
      ・プロトタイプを確認しながら、要求の実現を確認できるため、決まっていない仕様は問題とはならない。
      ・サイクルごとに各工程を進めるため、要員が複数の工程をこなすことになり、様々な経験を積める。
      ・他の要員が担当している機能との関連に注意を払う必要があり、要員同士のコミュニケーションが密になる。

    デメリット
      ・サイクルごとにユーザの要求や品質を確認するため、ユーザの要求が収束せず、開発の終わりが見えなくなる場合がある
      ・初期の計画段階で、サイクルの数を確定させるのが難しいため、見積もりやスケジュールが立てにくい
      ・工程ごとの分業体制がとりにくいため、様々な工程を柔軟に担当できる高い能力の要因が必要
      ・サイクルごとに仕様変更が行われるため、ドキュメントが整備されず、システム完成後の維持、管理が難しくなる。
      ・サイクルごとに顧客折衝を行わなければならないため、高度なマネジメント能力を必要とする

    RAD(Rapid Application Development)
      スパイラル型開発プロセスの1つ
      サイクルごとに「タイムボックス」という開発期間をあらかじめ設定してから、開発を進める。
      タイムボックスを超えた場合、開発期間を延長するのではなく、ボリュームを減らす。

  反復型開発プロセス
  
    「インクリメンタル反復型開発プロセス」と「イテレーティブ反復型開発プロセス」の2つに分けられる。
    
    インクリメンタル反復型開発プロセス
    
      システムを機能分割し、基礎となる機能を作成
　　　↓
      優先度やリスクの高い機能から順番に設計、テストを繰り返す 

    イテレーティブ反復型開発プロセス

      機能ごとではなく、システム全体を繰り返して開発する
      前の反復の成果を土台として、次の反復の開発を進める。反復期間は1週間から6週間がおすすめ。

    メリット
      ・機能の実現性を早期に検証でき、リスクの高い技術の検証を早期に行える。
      ・ウォータフォール型開発プロセスの弱点「開発の初期段階で、すべての要件を確定する」必要がない
      ・各反復開発が終了した時点で、動作可能なシステムが構築できているため、ユーザに確認してもらいながら要件を確定できる。

    デメリット
      ・各反復開発が終了した時点で、ユーザからの仕様の変更や追加を確認するため、ユーザからの要求が収束せずに、開発の終わりが見えなくなる恐れがある。
      ・開発の初期段階で、要件を確定させる必要がないため、規模の見積もりが難しく、一括受注の開発に向かない。
      ・システムを機能・サービス毎に分割することが難しい場合は、インクリメンタル反復型開発プロセスに適用できない。
      ・各反復開発において、仕様の変更や追加があるため、ドキュメントの整備が後回しとなる。
