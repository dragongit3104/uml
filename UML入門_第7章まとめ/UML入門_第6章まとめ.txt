クラス図

  クラス図とは、クラスの情報やクラス間の関係から、システムの静的な構成を表現するための図である。
  クラス図が完成すると、プログラムの骨組みが見えてくる。

  表記法
  長方形で表記し、上段にクラス名を配置する。
  長方形の中段に、属性を配置する。以下のような表現で表すことができる。ただし、型と初期値は省略が可能である。
  ★属性の表現方法★
  可視性 属性名：型 = 初期値
  長方形の下段に、操作を配置する。以下のような表現で表すことができる。ただし、引数：型と戻り値の型は省略が可能である。
  ★操作の表現方法★
  可視性 操作名(引数：型, ・・・・・)：戻り値の型

  可視性
  可視性とは、属性や操作に対して、システム内におけるアクセス可能範囲を定義するものである。
  可視性は全部で4種類ある。
  ★可視性の種類★
  記号 表現
  +    public
  -    private
  #    protected
  ～   package

  関連
  2つのクラスが何らかの関係を持っている場合、関連として表現できる。
  関連を表現するには、2つのクラス間を実線で結び、実線の中央部に関連名を配置。
  システム全体からみて名称を定義することが重要である。

  誘導可能性
  関連は通常、双方向性を持っているが、一方のオブジェクトからもう一方のオブジェクトにしかメッセージを送らず、
  逆は行われない場合、関連に矢印と×印を付けることで、関連の方向性を明確にする。

  多重度
  関連のあるクラス間において、一方からもう一方のクラスを見たときに存在しうる数値を多重度として表す。
  ★多重度の表現方法★
  多重度 意味
  1      1のみ
  *      0以上
  0..*   0以上
  1..*   1以上
  0..1   0or1

  関連端名
  一方からもう一方のクラスを見た時の役割を2つのクラス間の実践の両端に配置。
  システム全体から見て妥当な名称を定義することが重要である。

  限定子
  1対多の関係があるクラス間において、一方のクラスのインスタンスが、もう一方のインスタンスを特定する際、
  どの属性を用いるかを表したものである。
  必ずクラス図に表記しなければならないものではない。
  ★限定子の表現方法★
  実線の端に四角で囲み、属性を配置する。

  汎化
  一方のクラスが、もう一方のクラスをより具体化したクラスである場合のクラス間の関係である。
  頭に白抜きの三角形が付いた実線で表す。スーパークラスからサブクラスへ具体化することを特化と呼んでいる。

  集約
  クラス間に「全体ー部分」の関係があるとき、つまり「全体にあたるクラスが部分にあたるクラスを包含している」関係がある場合に使用。
  白抜きのひし形で表す。

  コンポジション
  ある全体インスタンスが、ある部分インスタンスを所有するとき、その部分インスタンスの生成/消滅の責務を
  全体インスタンスのみが担う場合、コンポジションを使用する。黒塗りのひし形で表す。

  依存
  一方のクラスのオブジェクトがもう一方のクラスの操作において利用されたり、影響を受けたりする関係の場合、依存を使用する。
  頭に矢印が付いた破線で表す。

  インターフェース
  定数や処理のないメソッドのみを定義した集まりのことを表している。
  操作の具体的な処理は、サブクラスで記載。
  インターフェースとサブクラスの関係を「実現」という。頭に白抜きの三角形が付いた破線で表す。
  インターフェースの内容を特に明示する必要がない場合は、「ロリポップ」で表現できる。ロリポップは白抜きの丸で表現し、サブクラスと実線でつなぐ。

  クラス図の描き方

    分析工程において、クラス間の関連や一部の操作を表記した「分析クラス図」を作成。
    設計工程において、シーケンス図やアクティビティ図をもとにして、属性や可視性などを表記した「設計クラス図」を作成。
    実装工程以降で、設計クラス図を基に実装を行い、実装に合わせてクラス図の修正を行う。

    分析クラス図を作図する際は、ユースケース図やオブジェクト図からクラスを抽出する。そして、クラス間の関連を作成。

  オブジェクト指向
    
    クラス間に何らかの関係がある場合、「is-a」関係と「has-a」関係の2つに分けられる。
    「is-a」関係とは左側クラスが右側クラスの「特化」であり、右側のクラスは左側クラスの「汎化」である。
    例えば、「マネージャー」クラスと「社員クラス」クラスは「マネージャー is a 社員」と表現できるので、
    「is-a」関係となり、クラス図では「汎化」で表現できる。

    2つのクラス間の多重度が多対多となった場合、そのまま実装するのはかなり困難な作業となるため、2クラスの間に関連クラスを新たに作成することで、多対多の関係を1対多の関係にすることができ、実装が容易となる。